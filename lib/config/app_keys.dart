import 'dart:typed_data';
import 'package:agnostiko/agnostiko.dart';
import 'dart:convert';

class AppKeys {
  static final des = _DESKeys();
  static final aes = _AESKeys();
  static final rsa = _RSAKeys();
}

class _DESKeys {
  // Componente 1 del KEK: '5E461CB502DFB98F2F7A73D54002923E980D73DA026E91DC'
  // Componente 2 del KEK: '86103867D03B64CB4CA75B0D02CB3B857F6B97645E8F4A40'
  // Componente 3 del KEK: '0D5D0DEC0E1CD92AAB80D0D0B661523E4A5E97F770C8AB52'
  final kek = SymmetricKey(
    index: 1,
    type: KeyType.DES,
    data: "D50B293EDCF8046EC85DF808F4A8FB85AD3873492C2970CE".toHexBytes(),
    kcv: "2764BA".toHexBytes(),
  );

  /// Llave DUKPT transaccional utilizado en el flujo demo
  ///
  /// Esta llave está encriptada con la KEK TDES en modo ECB
  ///
  /// El valor en claro es 'A66AB26590D3186E8A4C5A40D6F4F15D'
  final transaction = DUKPTKey(
    index: 2,
    type: KeyType.DES,
    data: "5796338DF4BE979272A4F49F1D9999C1".toHexBytes(),
    ksn: "FFFF7790169673800001".toHexBytes(),
    kcv: "2764BA".toHexBytes(),
  );

  /// Llave TDES fija de PIN Online para flujo transaccional
  ///
  /// Esta llave está encriptada en modo CBC con la KEK
  /// Los parámetros para su carga están en [pinFixedKeyParams]
  ///
  /// El valor de la llave en claro es: 619F668064109FC33178820304679040
  final pinFixed = SymmetricKey(
    type: KeyType.DES,
    index: 3,
    data: "2F03E058078BDA9BAE5C5A6A913B2EBF".toHexBytes(),
    kcv: "98C5EF".toHexBytes(),
  );

  final pinFixedClearData = "619F668064109FC33178820304679040".toHexBytes();

  // Paramétros para cargar llave fija de PIN
  final pinFixedParams = AlgorithmParameters(
    cipherMode: CipherMode.CBC,
    iv: "64FEAA7C5DF63C75".toHexBytes(),
  );

  /// Llave inicial DUKPT para PIN Online en flujo transaccional
  ///
  /// Esta llave está encriptada en modo ECB con la KEK
  ///
  /// El valor de la llave en claro es: D9497F2A705FC3978BA6C4067CD5F8AF
  final pinDUKPT = DUKPTKey(
    type: KeyType.DES,
    index: 4,
    data: "5577DBC964766E33CF70268A3525D15C".toHexBytes(),
    ksn: "FFFF7790169673800001".toHexBytes(),
    kcv: "4B59D6".toHexBytes(),
  );

  final pinDUKPTClearData = "D9497F2A705FC3978BA6C4067CD5F8AF".toHexBytes();

  /// Llave TDES fija para encriptado de datos
  ///
  /// Esta llave está encriptada en modo CBC con la KEK
  /// Los parámetros para su carga están en [testDataKeyParams]
  ///
  /// El valor de la llave en claro es: DE822CA4E98C62764CD982FAF0FBEE5E
  final testDataFixed = SymmetricKey(
    type: KeyType.DES,
    index: 5,
    data: "6C59A084A9DDE646BC826AA9F0059EE9".toHexBytes(),
    kcv: "94DA1E".toHexBytes(),
  );

  // Paramétros para cargar llave fija de encriptado de datos
  final testDataFixedParams = AlgorithmParameters(
    cipherMode: CipherMode.CBC,
    iv: "64FEAA7C5DF63C75".toHexBytes(),
  );

  /// Llave inicial DUKPT para encriptado de datos
  ///
  /// Esta llave está encriptada en modo ECB con la KEK
  ///
  /// El valor de la llave en claro es: 5D5436C50A98ECC7F1B6D7FD8275A3A3
  final testDataDUKPT = DUKPTKey(
    type: KeyType.DES,
    index: 6,
    data: "F6A74E05C7CD21685961E4EC63D26A57".toHexBytes(),
    ksn: "FFFF7790169673800001".toHexBytes(),
    kcv: "098551".toHexBytes(),
  );

  /// Versión en claro de la llave inicial DUKPT para encriptado de datos
  final testDataDUKPTClear = DUKPTKey(
    type: KeyType.DES,
    index: 6,
    data: "5D5436C50A98ECC7F1B6D7FD8275A3A3".toHexBytes(),
    ksn: "FFFF7790169673800001".toHexBytes(),
    kcv: "098551BA".toHexBytes(),
  );

  /// Llave TDES DUKPT (en claro) para encriptado de datos (legacy)
  final testLegacyClear = DUKPTKey(
    type: KeyType.DES,
    index: 7,
    data: "FDB5C138D31DDCAA6C5DC76827EF487E".toHexBytes(),
    kcv: "FDFCAE".toHexBytes(),
    ksn: "0102012345678AE00000".toHexBytes(),
  );

  /// Llave TDES DUKPT (encriptada) para encriptado de datos (legacy)
  ///
  /// Esta llave está encriptada en modo ECB con la KEK
  final testLegacyEncrypted = DUKPTKey(
    type: KeyType.DES,
    index: 7,
    data: "83ABD2DE28A80104367CB1DA2962862E".toHexBytes(),
    kcv: "FDFCAE".toHexBytes(),
    ksn: "0102012345678AE00000".toHexBytes(),
  );

  /// Llave DES para encriptar bloques TR31
  final tr31KEK = SymmetricKey(
    index: 2,
    type: KeyType.DES,
    data: "2052E975A49DC4E5D9F2B6BF5EAE20E0".toHexBytes(),
  );

  /// Llave TR31 fija para PIN Online DES
  ///
  /// El valor de la llave en claro es: ECADD3D0B038EF31B5A17015FDDAAE3B
  final pinTR31Fixed = SymmetricKey(
    type: KeyType.DES,
    index: 8,
    data: const AsciiCodec().encode(
      "B0080P0TE00N00004BD5947598EAC165B96CAFAB2C218DE2071325761B822FE48562607ECAEB15C3",
    ),
    kcv: "D0D272".toHexBytes(),
  );

  final pinTR31FixedClearData = "ECADD3D0B038EF31B5A17015FDDAAE3B".toHexBytes();

  /// Llave TR31 DUKPT para PIN Online DES
  ///
  /// El valor de la llave en claro es: 797949D6201A192A58DA1CEAE0236410
  final pinTR31DUKPT = DUKPTKey(
    type: KeyType.DES,
    index: 9,
    data: const AsciiCodec().encode(
      "B0104B1TX00N0100KS18123456780000000000014C92DE0677D7D6E0885C289F0C08117AC00BE6ED7652C09952B7D0630D148901",
    ),
    ksn: "12345678000000000001".toHexBytes(),
    kcv: "32F538".toHexBytes(),
  );

  final pinTR31DUKPTClearData = "797949D6201A192A58DA1CEAE0236410".toHexBytes();
}

class _AESKeys {
  /// Llave AES de 128 bits para encriptar otras llaves de la misma longitud
  final kek128 = SymmetricKey(
    index: 11,
    type: KeyType.AES,
    //data: "9F3A5B8C7D6E4F2A1B0C9D8F7E6D5C4B".toHexBytes(),
    //kcv: "F864D4".toHexBytes(),
  );

  /// Llave AES-128 fija para PIN Online de flujo transaccional
  ///
  /// Esta llave está encriptada en modo ECB con la KEK de AES-128
  /// Los parámetros para su carga están en [pinFixedKeyParams]
  ///
  /// El valor de la llave en claro es: B3A2F1E0D9C8B7A6F5E4D3C2B1A0F9E8
  final pinFixed = SymmetricKey(
    type: KeyType.AES,
    index: 14,
    data: "C9DF37E50C53F60F62C508A7F8EE540E".toHexBytes(),
    //kcv: "A417659CE6".toHexBytes(), // CMAC
    //kcv: "3B03A2".toHexBytes(), // ZERO
  );

  final pinFixedClearData = "B3A2F1E0D9C8B7A6F5E4D3C2B1A0F9E8".toHexBytes();

  // Paramétros para cargar llave fija de PIN
  final pinFixedParams = AlgorithmParameters(
    cipherMode: CipherMode.ECB,
  );

  /// Llave inicial AES DUKPT para PIN Online
  ///
  /// Esta llave está encriptada en modo ECB con la KEK
  ///
  /// El valor de la llave en claro es: 8A2CDADF6E29B9D3238F8F5E51B5CB54
  final pinDUKPT = DUKPTKey(
    type: KeyType.AES,
    index: 2,
    data: "4ED5E230D407479F30C2B444ED2699FB".toHexBytes(),
    ksn: "0FFFF9876543210E00000001".toHexBytes(),
    //kcv: "4B59D6".toHexBytes(),
  );

  final pinDUKPTClearData = "8A2CDADF6E29B9D3238F8F5E51B5CB54".toHexBytes();

  /// Llave AES fija para encriptado de datos
  ///
  /// Esta llave está encriptada en modo CBC con la KEK de AES-128
  ///
  /// El valor de la llave en claro es: 316B7A86583BD04F3116644F75C7CECD
  final testDataFixed = SymmetricKey(
    type: KeyType.AES,
    index: 15,
    data: "085D0E439E653927FE84B96006DAFFC8".toHexBytes(),
    kcv: "93C49263B6".toHexBytes(),
  );

  //Parametros para cargar llave fija de encriptado de datos
  final testDataFixedParams = AlgorithmParameters(
    cipherMode: CipherMode.ECB,
    //iv: "A7D6855B436197B5D09D2CCE7583A1BF".toHexBytes(),
  );

  /// Llave inicial DUKPT para encriptado de datos
  ///
  /// Esta llave está encriptada en modo ECB con la KEK de AES-128
  ///
  /// El valor de la llave en claro es: B3E9468C3E3EF87315CBA87C834A986D
  final testDataDUKPT = DUKPTKey(
    type: KeyType.AES,
    index: 22,
    //data: "C34D97C79119E5BD5641E9049EE91B61".toHexBytes(),
    // se está utilizando en claro por PAX
    data: "B3E9468C3E3EF87315CBA87C834A986D".toHexBytes(),
    ksn: "FFFF77901696738000000001".toHexBytes(),
    kcv: "A77E930D88".toHexBytes(),
  );

  /// Versión en claro de la llave inicial DUKPT para encriptado de datos
  final testDataDUKPTClear = DUKPTKey(
    type: KeyType.AES,
    index: 22,
    data: "B3E9468C3E3EF87315CBA87C834A986D".toHexBytes(),
    ksn: "FFFF77901696738000000001".toHexBytes(),
    kcv: "787DA546".toHexBytes(),
  );

  //Parametros para cargar llave fija de encriptado de datos
  final testDataDUKPTParams = AlgorithmParameters(
    cipherMode: CipherMode.ECB,
  );

  /// Llave AES de 128 bits para encriptar bloques TR31
  final tr31KEK128 = SymmetricKey(
    index: 16,
    type: KeyType.AES,
    data: "683E57316413B076DCFD1302F275BA73".toHexBytes(),
  );

  /// Llave TR31 fija para PIN Online AES
  ///
  /// El valor de la llave en claro es: 16BC5223B61ADF94521C160B2C868F1C
  final pinTR31Fixed = SymmetricKey(
    type: KeyType.AES,
    index: 17,
    data: const AsciiCodec().encode(
      "D0112P0AE00N0000171726A95F3986E30B50A717339C797C3F47D4EA2A09093448803B1B958B1630EEBAD84C8BD62E6DE1D6DEF7EB92F699",
    ),
    //kcv: "78DA90109D".toHexBytes(),
  );

  final pinTR31FixedClearData = "16BC5223B61ADF94521C160B2C868F1C".toHexBytes();

  /// Llave TR31 DUKPT para PIN Online AES
  ///
  /// El valor de la llave en claro es: C8130DD93ECEFE464638F8CD73BF7046
  final pinTR31DUKPT = DUKPTKey(
    type: KeyType.AES,
    index: 18,
    data: const AsciiCodec().encode(
      "D0112B1AX00N000076FA79706840E8DEC629CB07F2ED1FFA4F025F4914D89A073CBB78BB562CC04BF49E101E389F46AA7AFEC5AC1479835F",
    ),
    ksn: "123456780000000000000001".toHexBytes(),
  );

  final pinTR31DUKPTClearData = "C8130DD93ECEFE464638F8CD73BF7046".toHexBytes();

  /// Mapa de llaves AES DUKPT derivadas para llave de PIN cargada por TR31
  ///
  /// Esto es necesario dado que no contamos con el algoritmo de derivación para
  /// AES DUKPT, por lo cual las calculamos de antemano con una calculadora
  /// criptográfica.
  final Map<String, Uint8List> pinTR31DUKPTDerivateKeys = {
    "123456780000000000000001": "CC89A64A2B15800CA521D1A8991767EE".toHexBytes(),
    "123456780000000000000002": "AB8BAA71CEA31D48EABFE640069F7EC4".toHexBytes(),
    "123456780000000000000003": "F68FB63773186C511233A8E1FE8FDC02".toHexBytes(),
  };

  /// Llave TR31 fija para RSA
  ///
  ///Solo se envía el tipo e índice
  final pinTR31RSA = SymmetricKey(
    type: KeyType.AES,
    index: 19,
  );

  ///KSN para AES en RSA
  ///
  ///para la llave de PIN del flujo de Banorte
  final ksn = "FFFF77901696738000000001".toHexBytes();

  /// Llave TR31 fija para RSA
  ///
  ///Se usará como kek para la llave de PIN del flujo de Banorte
  final rsaKEK = SymmetricKey(
    type: KeyType.AES,
    index: 21,
  );

  final llavePinOnlineBanorte = DUKPTKey(
    type: KeyType.AES,
    index: 22,
  );

}
class _RSAKeys{
  final distributionKey = AsymmetricKey(
    datatoHexBytes(),
    index: 1,
    type: AsymKeyType.RSA
  );

  final dataKey = AsymmetricKey(
    data:"308204A40201000282010100C7B433BED854C40AB66006F9F2E50FD8F70E162A1989C4468A41E1F8A6D5443B1F121F57CF711DF5239D161594DE223EBF640D3A7A9EDDE23E1CEE3332EA05B0E8E66983F510E798E259621EEB6F7DC72573C0BF879078DD34BCAF652B1142E2370ABBB4AA33A8E61F173197C0009F416FBEE0F12205906D91761D104ABEC57CBB70A8660F5990447D5115523E1618D5DD3454132CC35440F56C1DFB21D86A3D4E7BCADD957F8CBAF02DBEF75390EC3FC09C81CC3A2C2EE6B2F0AB2EB56327F254963FB5E37DD9D07F8876050E1B3C2DA891039B44DC9FF2AD321092AD07695E7198B1590778AE6A0B11078C59BE7D055C40C14BA0ACCB390C34D1F4EAA08DB7020301000102820101008F4E74178E7BFD96465B50864AD42F741D8DA14022C566F0CBC40D5976B6F1D88F2A5D0D9151F61274B50425068805010C2CCB055CFAE5F4B567E35320452942534F0D06E174790D8FD85E7E1BAB0D123C80FD1F3433EB57A9C18107D348F6BB088E8E364E30F611F4DB9AFDEF8D42BB1D6A57571277F5B57ABDCC8B6567D2A4B3D7B02EC249055210CE27E177F68E4B2D8762AED2A292D152B7147E556B746D2C5E4EB10A747CDA092773AF1BE63DE462CACC78BF404AB7645C569116E92BD1B08A7DAE9DCCEBB9F06975B53E0F7EEF87D3632654052960320EA5DA89CC860E7845D4223149C74174DEF64CFEF56533E74AEB447C9105CEF8BA4AC1A761271902818100E9D59F19698F4F88B1054911DEA48F185B24A37D1FD59DF9C86F6402933F943256660C68D89E6CE47D6C2AF73D30D43B26B4AE727B3B909A45B94544708B26A2F2CB3CE80208EAB8563E08A4C8F01CE42D9EE582237E112AEB150978F741DBB4D8F5CF8CF3EC84B2F8BEDF8515CD09F10A77D440144A25C1164AFEA857B1046302818100DAA258C411A46F1586F4CA9D721EAE91103130085152C730FF080AD09613D4E9A26F6184A1C33FC156AA51B39661B2011A4F62C2BEFE7FD3ECAFE7D4E3D01780F8497E65AC921BA4F32E405547F7C20207E4BA10C080217AB5955B0DC214390F77F68A49C4CD7F6A5F674115B5FE0051A5EB778FF775EE32D4D0D65A6A79BF9D02818073870A6AE8BF5841258C81F4653692482B47A7CA7AFEF464E3453D79143CF6400475B8ADD8503566921CEE0166E708040D747937B070D65992171E04D941B69E0D2CA273D2058BC9F53A02D53F3D7A58B5BD6A90E86E31972DBC2008F6C83FFF52ADE79431336AC06DAB080DDD9E86C9E32D1EDD65E8D84C54724AECEB1E571702818100CC7151360F154736C71AF2B865B561218F159FC7B75C039DC26D5FC78AFF0272728D5A902EBFA8477F6606BE3B1A21DCBC208DC673D901E947037A72ED9071DA0CD2949A38D3EB7BC456749C0A8F1860D3C6C362D4CF3BFF45FB62C8ABBA435D3E9D50D5086DECFEA835A27BCDD1B5B4A3C55AE949CA8232102534BC19A2BD550281806EB82AE428F6A7BD1831B21CC1DCF2BD158F7A391FFB6238323F7F0BEE67677571E9990532D1B8ADF31CBD534F073DAD5F61CC8C7B86A85B43D95A1170FD0EB38143A5B0635B7CEAA22942C802FA2A2C0DA557B8B856F3FE5DAA150CF74675A28A1D0F0CD0BAFCE5645746BF819206DDC88FD27F571F5EAD7A295E38979B9B0F".toHexBytes(),
    index: 3,
    type: AsymKeyType.RSA
  );

  final dataKeyData = "0102030405060708090A0B0C0D0E0F".toHexBytes();
}

class BanorteKeys {
  static final BanorteKeys _instance = BanorteKeys._internal();
  BanorteKeys._internal();

  static BanorteKeys get instance => _instance;

  Uint8List initialKey = Uint8List(0);

  void setInitialKey(Uint8List key) => initialKey = key;
}